MIDIClient.init;
MIDIClient.destinations;
~m=MIDIOut.new(0);
~m.latency = 0;

(
Server.default = s = Server.local;
////server setup
(
s.options.numWireBufs = 1024*4;
s.options.numOutputBusChannels=4;
s.options.numInputBusChannels=0;
TempoClock.default.tempo_(1);
s.options.memSize = 8192*128*2;
s.options.blockSize = 64*4;
s.options.maxNodes = 1024 * 16;
s.options.sampleRate= 44100;
);

s.waitForBoot{
/////wavetables
Buffer.freeAll;

~t= Buffer.alloc(s,2048);


////////////////////////////////////speaker setup///other
/*(
// 3D///cube
~a = VBAPSpeakerArray.new(3, [[0, 45], [90, 45], [180, 45], [90.neg, 45],[0, 45.neg], [90, 45.neg], [180, 45.neg], [90.neg, 45.neg]]);
//0 up fl, 1 up bl, 2 up br, 3 up fr, 4 down fl, 5 down bl, 6 down br, 7 down fr
~b = Buffer.loadCollection(s, ~a.getSetsAndMatrices);
///furhter on speaker setup can be geodesic octahedron 2nd order torus with 16 channels, and Rhombic triacontahedron with 32 vertices as 32 speaker channels
	// )*/
	~a = VBAPSpeakerArray.new(3, [[0, 45], [180, 45], [90, 45.neg], [90.neg, 45.neg]]);
	 ~b = Buffer.loadCollection(s, ~a.getSetsAndMatrices);

// 16
	// ~a = VBAPSpeakerArray.new(3, [[0, 45], [90, 45], [180, 45], [90.neg, 45],
	// 	[0, 0], [45, 0], [90, 0], [135, 0],[180.neg,0], [135.neg, 0], [90.neg, 0],[45.neg, 0],
	// [0, 45.neg], [90, 45.neg], [180, 45.neg], [90.neg, 45.neg]]);
	// //0 up fl, 1 up bl, 2 up br, 3 up fr, 4 down fl, 5 down bl, 6 down br, 7 down fr
	// ~b = Buffer.loadCollection(s, ~a.getSetsAndMatrices);
///furhter on speaker setup can be geodesic octahedron 2nd order torus with 16 channels, and Rhombic triacontahedron with 32 vertices as 32 speaker channels
//)

///////////////////////////////////////////////////////arrays
///////l-system
	(
{
var dict = IdentityDictionary[\A -> "AB", \B -> "A"];
//These are the production rules of the L-system
var word = "A";
var string_temp = "";
var iter = 16;

//These are diction for the mapping of the alphabet to "artistic" parameters: degrees in a scale, beat occurrence, etc.

var dictnotes = IdentityDictionary[\A -> 0, \B -> 1];
 ~r=[];

//This iteration generates the system recursively

iter.do({

word.asArray.do({|i|
    string_temp = string_temp ++ dict[i.asSymbol];
});

word = string_temp;
	string_temp = "";
});

word.postln;

//Here we map the final system to the parameters as above

word.do({|i| ~r = ~r ++ dictnotes[i.asSymbol];});

~r.postln;
}.value
);


//////////////////////////////////////////////////basis
	(
{
var  sph1,sph2,sph3,sph4,sph5,m_x=2,m_y=1,m_z=3;
var az1=0,el1=0,az2=0,el2=0,az3=0,el3=0,mag,mag_x,mag_y,mag_z;
var az4=0,el4=0,az5=0,el5=0,pl1=0,pl2=0,pl3=0,pl4=0,pl5=0;
var angle=0,ang=0;
var azimuth,elevation,magnitudex,magnitudey,magnitudez;

~az=[];~el=[];~magx=[];~magy=[];~magz=[];

		45.do{
		8.do{
azimuth=(13).collect{


			az1 = (angle+ang+(45*2.pow(pl1/12))).wrap(180.neg,180);  // Increment azimuth
				el1 = (angle+(ang/2)+((45/2)*2.pow(pl1/12))).wrap(90.neg,90);
		pl1=(pl1+1).mod(13);

		sph1=Spherical(1,(az1.degrad),(el1.degrad)).theta.round(0.00001);

	};

elevation=(13).collect{

				az2 = (angle+ang+(45*2.pow(pl2/12))).wrap(180.neg,180);  // Increment azimuth
			el2 = (angle+(ang/2)+((45/2)*2.pow(pl2/12))).wrap(90.neg,90);
		pl2=(pl2+1).mod(13);

		sph2=Spherical(1,(az2.degrad),(el2.degrad)).phi.round(0.00001);

	};

magnitudex=(13).collect{

			az3 = (angle+ang+(45*2.pow(pl3/12))).wrap(180.neg,180);  // Increment azimuth
			el3 = (angle+(ang/2)+ ((45/2)*2.pow(pl3/12))).wrap(90.neg,90);
		pl3=(pl3+1).mod(13);

	sph3=Spherical(1,(az3.degrad),(el3.degrad));
	 /*mag_x=(Complex(cos((sph3.theta.round(0.00001)*m_x).wrap(pi.neg,pi)),cos((sph3.theta.round(0.00001)*m_x).wrap(pi.neg,pi))).rho*Complex(cos((sph3.phi.round(0.00001)).wrap((pi/2).neg,(pi/2))),cos((sph3.phi.round(0.00001)).wrap((pi/2).neg,(pi/2)))).rho)*sph3.rho;
*/
////for in-between harmonics multiply sin(phi) after cos, when m is 2 then harm 3/2 is formed in oder 3, when m is 3 harm 4/3 is formed in oder 4 and when m is 3 for theta and 2 for phi harm 4/2 is formed for order4//////same for y axis

		mag_x=(Complex(cos((sph3.theta.round(0.00001)*m_x).wrap(pi.neg,pi)),
			cos((sph3.theta.round(0.00001)*m_x).wrap(pi.neg,pi))).rho*
		 	Complex(sin((sph3.phi.round(0.00001)*(m_x-1)).wrap((pi/2).neg,(pi/2))),sin((sph3.phi.round(0.00001)*(m_x-1)).wrap((pi/
		 	2).neg,(pi/2)))).rho*
		 Complex(cos((sph3.phi.round(0.00001)).wrap((pi/2).neg,(pi/2))),cos((sph3.phi.round(0.00001)).wrap((pi/2).neg,(pi/2)))).rho)*sph3.rho;

};

magnitudey=(13).collect{

			az4 = (angle+ang+(45*2.pow(pl4/12))).wrap(180.neg,180);  // Increment azimuth
			el4 = (angle+(ang/2)+((45/2)*2.pow(pl4/12))).wrap(90.neg,90);
		pl4=(pl4+1).mod(13);

	sph4=Spherical(1,(az4.degrad),(el4.degrad));

	mag_y=(Complex(sin((sph4.theta.round(0.00001)*m_y).wrap(pi.neg,pi)),
		sin((sph4.theta.round(0.00001)*m_y).wrap(pi.neg,pi))).rho*
		Complex(cos((sph4.phi.round(0.00001)).wrap((pi/2).neg,(pi/2))),cos((sph4.phi.round(0.00001)).wrap((pi/2).neg,(pi/
		2)))).rho)*sph4.rho;
//		mag_y=(Complex(sin((sph4.theta.round(0.00001)*m_y).wrap(pi.neg,pi)),sin((sph4.theta.round(0.00001)*m_y).wrap(pi.neg,pi))).rho*
//Complex(sin((sph4.phi.round(0.00001)*(m_y-1)).wrap((pi/2).neg,(pi/2))),sin((sph4.phi.round(0.00001)*(m_y-1)).wrap((pi/2).neg,(pi/2)))).rho*
//Complex(cos((sph4.phi.round(0.00001)).wrap((pi/2).neg,(pi/2))),cos((sph4.phi.round(0.00001)).wrap((pi/2).neg,(pi/2)))).rho)*sph4.rho;
};

magnitudez=(13).collect{

			az5 = (angle+ang+(45*2.pow(pl5/12))).wrap(180.neg,180);  // Increment azimuth
				el5 = (angle+(ang/2)+((45/2)*2.pow(pl5/12))).wrap(90.neg,90);
		pl5=(pl5+1).mod(13);

		sph5=Spherical(1,(az5.degrad),(el5.degrad));

if(
m_z.even,
mag_z=Complex(cos((sph5.phi.round(0.00001)*m_z).wrap((pi/2).neg,(pi/2))),cos((sph5.phi.round(0.00001)*m_z).wrap((pi/2).neg,(pi/2)))).rho*sph5.rho,
mag_z=Complex(sin((sph5.phi.round(0.00001)*m_z).wrap((pi/2).neg,(pi/2))),sin((sph5.phi.round(0.00001)*m_z).wrap((pi/2).neg,(pi/2)))).rho*sph5.rho
	);
////z axis   ambi..  sin for odd numbers, cos for even
			};ang=(ang+45).wrap(0,360);~az=~az++azimuth;~el=~el++elevation;~magx=~magx++magnitudex;~magy=~magy++magnitudey;~magz=~magz++magnitudez
};angle=(angle+(360-(360/1.6180339887499))).wrap(0,360);~az=~az++azimuth;~el=~el++elevation;~magx=~magx++magnitudex;~magy=~magy++magnitudey;~magz=~magz++magnitudez};
}.value;
(
~magx=~magx/(2.sqrt);
~magy=~magy/(2.sqrt);
~magz=~magz/(2.sqrt);
 );
);
//////////////////////////////////////////////////////// durs

	///binary basis

	(
{
var angle1=0, angle2=0,value1,value2,n1=0,n2=0,re,im,angle=0;
			~real=[];~imag=[];

			(360).do {
  re=12.collect{
					n1=(n1+1);
					angle1 = (angle + (n1*(pi/12))).wrap(0,2pi);
					//angle1 = (angle + (pi/2)*2.pow(n1/12)).wrap(0,2pi);
		//n1=(n1+1).mod(13);
					value1=exp(Complex(0,1)*angle1).real.abs.round(0.00001);};
  im=12.collect{
					n2=(n2+1);
					angle2 = (angle + (n2*(pi/12))).wrap(0,2pi);
					//angle2 = (angle + (pi/2)*2.pow(n2/12)).wrap(0,2pi);
		//n2=(n2+1).mod(13);
		value1=exp(Complex(0,1)*angle2).imag.abs.round(0.00001);};

				~real=~real++re; ~imag=~imag++im; n1=0;n2=0;
				angle = (angle + (360-(360/1.6180339887499))).wrap(0, 360);
			};
}.value
);

	(
{
var dur=1,ph1,pl1=0,sph;


~dur1 = (360*12).collect{
			sph=~real.[pl1];
	pl1=pl1+1;
	ph1=(sph+dur).round(1/16);

	};

}.value;
	{
var dur=1,ph1,pl1=0,sph;

~dur2 = (360*12).collect{
			sph=~imag.[pl1];
	pl1=pl1+1;
	ph1=(sph+dur).round(1/16);

	};

}.value;
	);
//////////////dur randomization

{	var seed = 1000.rand;
thisThread.randSeed = seed; ~duration_x1 = ~dur1.scramble;
thisThread.randSeed = seed; ~duration_y1 = ~dur2.scramble;	}.value;


		//////////////////////wavetable
		{
var signal,wt,m=0,amp;

~level=90.collect{m=m+1;amp=m.reciprocal};
~phase=90.collect{pi};
signal=Signal.sineFill(1024,~level,~phase);

wt = signal.asWavetable;
~t.loadCollection(wt);
signal.plot;
		}.value;

		//////notes
	({
		var angle=0;
		~angle=(360*12).collect{
		angle=(angle+(360-(360/1.6180339887499))).wrap(0,360);
		}
		}.value;
	~angle1=~angle/2;
	);


/////synths////
	(
(
SynthDef.new(\ospace1, {
	arg mult1=1,mult2=1,mult3=1,amp=1,pl1=1;
	var phase,osc1,osc2,osc3,sphere,mag,amp1,amp2,amp3,decay=7,pl2=0,envp,octave=1;
	var ton1,ton2,ton3;
	var fundamental;
	var freq,pitch1,pitch2,pitch3,env;
	var pitch;
				var magx,magy,magz;

			// var wrappedOut1 = { |busArray, signalArray|
			// 	[busArray, signalArray].flop.do { |pair|
			// Out.ar(pair[0], pair[1])}};
			// var wrappedOut2 = { |busArray, signalArray|
			// 	[busArray, signalArray].flop.do { |pair|
			// Out.ar(pair[0], pair[1])}};
			// var wrappedOut3 = { |busArray, signalArray|
			// 	[busArray, signalArray].flop.do { |pair|
			// Out.ar(pair[0], pair[1])}};
			// var out1 = NamedControl.kr(\out1, [0, 1, 2, 3]);  // multiple buses!
//	var out2 = NamedControl.kr(\out2, [0, 1, 2, 3, 4, 5]);  // multiple buses!
//	var out3 = NamedControl.kr(\out3, [0, 1, 2, 3, 4, 5]);  // multiple buses!

				//env=EnvGen.ar(Env.adsr(0.05,0.5,0.5,decay),gate,doneAction:2,levelScale:0.1);
				env=EnvGen.ar(Env.perc(0.01,decay,amp),doneAction:2,levelScale:1);

fundamental=(55);
freq=(fundamental*octave);

	//	mag=Cartesian(Select.kr(pl1,~magx), Select.kr(pl1,~magy),Select.kr(pl1,~magz));
				magx=Cartesian(Select.kr(pl1,~magx), 0,0);
				magy=Cartesian(0, Select.kr(pl1,~magy),0);
				magz=Cartesian(0, 0,Select.kr(pl1,~magz));

				sphere=Spherical(1,Select.kr(pl1,~az),Select.kr(pl1,~el));

	n1=(sphere.x).round(0.00000001); n2=(sphere.y).round(0.00000001); n3=(sphere.z).round(0.00000005);

ton1=n1.abs.linlin(0,1,1,2)*mult1;
ton2=n2.abs.linlin(0,1,1,2)*mult2;
ton3=n3.abs.linlin(0,1,1,2)*mult3;


	    amp1=(ton1.reciprocal*octave.reciprocal).round(0.00000001);
		amp2=(ton2.reciprocal*octave.reciprocal).round(0.00000001);
		amp3=(ton3.reciprocal*octave.reciprocal).round(0.00000001);

	pitch1=(freq*ton1).round(0.0000001);
	pitch2=(freq*ton2).round(0.0000001);
	pitch3=(freq*ton3).round(0.0000001);

				~m.noteOn(chan, note: pitch1.cpsmidi);
				~m.noteOn(chan, note: pitch2.cpsmidi);
				~m.noteOn(chan, note: pitch3.cpsmidi);
				~m.noteOff(chan, note: pitch1.cpsmidi);
				~m.noteOff(chan, note: pitch2.cpsmidi);
				~m.noteOff(chan, note: pitch3.cpsmidi);

osc1=VBAP.ar(4,
					SoundIn.ar(0,amp1*magx.rho.round(0.00000001)),
~b.bufnum,
sphere.theta.raddeg,sphere.phi.raddeg
//Osc.ar(~t.bufnum,1,phase:sphere.theta.linlin(pi.neg,pi,2pi.neg,2pi),mul:180),
//Osc.ar(~t.bufnum,1,phase:sphere.phi.linlin((pi/2).neg,(pi/2),2pi.neg,2pi),mul:90)
		);

osc2=VBAP.ar(4,
						SoundIn.ar(1,amp2*magy.rho.round(0.00000001)),
~b.bufnum,
sphere.theta.raddeg,sphere.phi.raddeg
//Osc.ar(~t.bufnum,1,phase:sphere.theta.linlin(pi.neg,pi,2pi.neg,2pi),mul:180),
//Osc.ar(~t.bufnum,1,phase:sphere.phi.linlin((pi/2).neg,(pi/2),2pi.neg,2pi),mul:90)
		);

osc3=VBAP.ar(4,
						SoundIn.ar(2,amp3*magz.rho.round(0.00000001)),
~b.bufnum,
sphere.theta.raddeg,sphere.phi.raddeg
//Osc.ar(~t.bufnum,1,phase:sphere.theta.linlin(pi.neg,pi,2pi.neg,2pi),mul:180),
//Osc.ar(~t.bufnum,1,phase:sphere.phi.linlin((pi/2).neg,(pi/2),2pi.neg,2pi),mul:90)
		);

	//wrappedOut3.value(out1,LeakDC.ar(osc3,mul:env));
					Out.ar(0,LeakDC.ar(osc3,mul:env));

	//	wrappedOut2.value(out1,LeakDC.ar(osc2,mul:env));
					Out.ar(0,LeakDC.ar(osc2,mul:env));

		//wrappedOut1.value(out1,LeakDC.ar(osc1,mul:env));
					Out.ar(0,LeakDC.ar(osc1,mul:env));

}).add;
);
);

////////////list
	({
		var n=1.neg;
		~list1=(45*8*13).collect{
		n=n+1;
		}
		}.value
	);


//////////pattern for mobius strib of sequential or parallel play of directions
	(

~aa=Pdef(\1, Pbind(\instrument, \ospace1,
			//\dur,Pseq(~dur1,1),
			\dur,1,
			//\pl1,Pbrown(0,4680,13,inf),
	\pl1,Pseq([
				Pseq(
				[Pseq(Array.series(13,0,1),1),Pseq(Array.series(13,13,1),1),Pseq(Array.series(13,26,1),1),Pseq(Array.series(13,39,1),1),
				Pseq(Array.series(13,52,1),1),Pseq(Array.series(13,65,1),1),Pseq(Array.series(13,78,1),1),Pseq(Array.series(13,91,1),1)]
				,1),
				Pseq(
				[Pseq(Array.series(13,104,1),1),Pseq(Array.series(13,117,1),1),Pseq(Array.series(13,130,1),1),Pseq(Array.series(13,143,1),1),
				Pseq(Array.series(13,156,1),1),Pseq(Array.series(13,169,1),1),Pseq(Array.series(13,182,1),1),Pseq(195,207,6Array.series(13,195,1),1)]
				,1),
				Pseq(
				[Pseq(Array.series(13,208,1),1),Pseq(Array.series(13,221,1),1),Pseq(Array.series(13,234,1),1),Pseq(Array.series(13,247,1),1),
				Pseq(Array.series(13,260,1),1),Pseq(Array.series(13,273,1),1),Pseq(Array.series(13,286,1),1),Pseq(Array.series(13,299,1),1)]
				,1),
				Pseq(
				[Pseq(Array.series(13,312,1),1),Pseq(Array.series(13,325,1),1),Pseq(Array.series(13,338,1),1),Pseq(Array.series(13,351,1),1),
				Pseq(Array.series(13,364,1),1),Pseq(Array.series(13,377,1),1),Pseq(Array.series(13,390,1),1),Pseq(Array.series(13,403,1),1)]
				,1),
				Pseq(
				[Pseq(Array.series(13,416,1),1),Pseq(Array.series(13,429,1),1),Pseq(Array.series(13,442,1),1),Pseq(Array.series(13,455,1),1),
				Pseq(Array.series(13,468,1),1),Pseq(Array.series(13,481,1),1),Pseq(Array.series(13,494,1),1),Pseq(Array.series(13,507,1),1)]
				,1),
				Pseq(
				[Pseq(Array.series(13,520,1),1),Pseq(Array.series(13,533,1),1),Pseq(Array.series(13,546,1),1),Pseq(Array.series(13,559,1),1),
				Pseq(Array.series(13,572,1),1),Pseq(Array.series(13,585,1),1),Pseq(Array.series(13,598,1),1),Pseq(Array.series(13,611,1),1)]
				,1),
				Pseq(
				[Pseq(Array.series(13,624,1),1),Pseq(Array.series(13,637,1),1),Pseq(Array.series(13,650,1),1),Pseq(Array.series(13,663,1),1),
				Pseq(Array.series(13,676,1),1),Pseq(Array.series(13,689,1),1),Pseq(Array.series(13,702,1),1),Pseq(Array.series(13,715,1),1)]
				,1),
				Pseq(
				[Pseq(Array.series(13,728,1),1),Pseq(Array.series(13,741,1),6,1),Pseq(Array.series(13,754,1),1),Pseq(Array.series(13,767,1),1),
				Pseq(Array.series(13,780,1),1),Pseq(Array.series(13,793,1),1),Pseq(Array.series(13,806,1),1),Pseq(Array.series(13,819,1),1)]
				,1)
			],inf),
			//\pl1,Pseq(~list1,inf),
		//\out1,Pn(Pshuf([0, 1, 2, 3], 1), inf).clump(4).collect([_]),
		//	\out2,Pn(Pshuf([0, 1, 2, 3, 4, 5], 1), inf).clump(6).collect([_]),
		//	\out3,Pn(Pshuf([0, 1, 2, 3, 4, 5], 1), inf).clump(6).collect([_]),
		\mult1,Prand([1,2,4,8],inf),
				\mult2,Prand([1,2,4,8],inf),
				\mult3,Prand([1,2,4,8],inf),
			//\amp,Pseq(~r,inf);///l system
			\amp,1;
));

~aaa=Pdef(\2, Pbind(\instrument, \ospace1,
			//\dur,Pseq(~dur2,1),
			\dur,1,
			\pl1,Pseq([
				Pseq(
				[Pseq(Array.series(13,0,1),1),Pseq(Array.series(13,13,1),1),Pseq(Array.series(13,26,1),1),Pseq(Array.series(13,39,1),1),
				Pseq(Array.series(13,52,1),1),Pseq(Array.series(13,65,1),1),Pseq(Array.series(13,78,1),1),Pseq(Array.series(13,91,1),1)]
				,1),
				Pseq(
				[Pseq(Array.series(13,104,1),1),Pseq(Array.series(13,117,1),1),Pseq(Array.series(13,130,1),1),Pseq(Array.series(13,143,1),1),
				Pseq(Array.series(13,156,1),1),Pseq(Array.series(13,169,1),1),Pseq(Array.series(13,182,1),1),Pseq(195,207,6Array.series(13,195,1),1)]
				,1),
				Pseq(
				[Pseq(Array.series(13,208,1),1),Pseq(Array.series(13,221,1),1),Pseq(Array.series(13,234,1),1),Pseq(Array.series(13,247,1),1),
				Pseq(Array.series(13,260,1),1),Pseq(Array.series(13,273,1),1),Pseq(Array.series(13,286,1),1),Pseq(Array.series(13,299,1),1)]
				,1),
				Pseq(
				[Pseq(Array.series(13,312,1),1),Pseq(Array.series(13,325,1),1),Pseq(Array.series(13,338,1),1),Pseq(Array.series(13,351,1),1),
				Pseq(Array.series(13,364,1),1),Pseq(Array.series(13,377,1),1),Pseq(Array.series(13,390,1),1),Pseq(Array.series(13,403,1),1)]
				,1),
				Pseq(
				[Pseq(Array.series(13,416,1),1),Pseq(Array.series(13,429,1),1),Pseq(Array.series(13,442,1),1),Pseq(Array.series(13,455,1),1),
				Pseq(Array.series(13,468,1),1),Pseq(Array.series(13,481,1),1),Pseq(Array.series(13,494,1),1),Pseq(Array.series(13,507,1),1)]
				,1),
				Pseq(
				[Pseq(Array.series(13,520,1),1),Pseq(Array.series(13,533,1),1),Pseq(Array.series(13,546,1),1),Pseq(Array.series(13,559,1),1),
				Pseq(Array.series(13,572,1),1),Pseq(Array.series(13,585,1),1),Pseq(Array.series(13,598,1),1),Pseq(Array.series(13,611,1),1)]
				,1),
				Pseq(
				[Pseq(Array.series(13,624,1),1),Pseq(Array.series(13,637,1),1),Pseq(Array.series(13,650,1),1),Pseq(Array.series(13,663,1),1),
				Pseq(Array.series(13,676,1),1),Pseq(Array.series(13,689,1),1),Pseq(Array.series(13,702,1),1),Pseq(Array.series(13,715,1),1)]
				,1),
				Pseq(
				[Pseq(Array.series(13,728,1),1),Pseq(Array.series(13,741,1),6,1),Pseq(Array.series(13,754,1),1),Pseq(Array.series(13,767,1),1),
				Pseq(Array.series(13,780,1),1),Pseq(Array.series(13,793,1),1),Pseq(Array.series(13,806,1),1),Pseq(Array.series(13,819,1),1)]
				,1)
			],inf),
			//\pl1,Pbrown(0,4680,13,inf),
			//\pl1,Pseq(~list1,inf),
		//\out1,Pn(Pshuf([0, 1, 2, 3], 1), inf).clump(4).collect([_]),
		//	\out2,Pn(Pshuf([0, 1, 2, 3, 4, 5], 1), inf).clump(6).collect([_]),
		//	\out3,Pn(Pshuf([0, 1, 2, 3, 4, 5], 1), inf).clump(6).collect([_]),
				\mult1,Prand([1,2,4,8],inf),
				\mult2,Prand([1,2,4,8],inf),
				\mult3,Prand([1,2,4,8],inf),
			//\amp,Pseq(~r,inf);///l system
			\amp,1;
));


	);
	TempoClock.default.tempo_(1/1);



}
)


(
~aa.play;
~aaa.play;
);
s.record(numChannels:4);
